/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function messagekit_new(a: number, b: number, c: number): number;
export function messagekit_withCFrag(a: number, b: number): number;
export function messagekit_decrypt(a: number, b: number, c: number): void;
export function messagekit_capsule(a: number): number;
export function messagekit_fromBytes(a: number, b: number, c: number): void;
export function messagekit_toBytes(a: number, b: number): void;
export function __wbg_messagekitwithfrags_free(a: number): void;
export function messagekitwithfrags_withCFrag(a: number, b: number): number;
export function messagekitwithfrags_decryptReencrypted(a: number, b: number, c: number, d: number): void;
export function __wbg_hrac_free(a: number): void;
export function hrac_new(a: number, b: number, c: number, d: number): number;
export function hrac_fromBytes(a: number, b: number, c: number): void;
export function hrac_toBytes(a: number, b: number): void;
export function __wbg_encryptedkeyfrag_free(a: number): void;
export function encryptedkeyfrag_new(a: number, b: number, c: number, d: number): number;
export function encryptedkeyfrag_decrypt(a: number, b: number, c: number, d: number, e: number): void;
export function encryptedkeyfrag_fromBytes(a: number, b: number, c: number): void;
export function encryptedkeyfrag_toBytes(a: number, b: number): void;
export function treasuremapbuilder_new(a: number, b: number, c: number, d: number, e: number): void;
export function treasuremapbuilder_addKfrag(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function treasuremapbuilder_build(a: number): number;
export function __wbg_treasuremap_free(a: number): void;
export function __wbg_treasuremapbuilder_free(a: number): void;
export function treasuremap_encrypt(a: number, b: number, c: number): number;
export function treasuremap_destinations(a: number, b: number): void;
export function treasuremap_makeRevocationOrders(a: number, b: number, c: number): void;
export function treasuremap_hrac(a: number): number;
export function treasuremap_threshold(a: number): number;
export function treasuremap_policyEncryptingKey(a: number): number;
export function treasuremap_publisherVerifyingKey(a: number): number;
export function treasuremap_fromBytes(a: number, b: number, c: number): void;
export function treasuremap_toBytes(a: number, b: number): void;
export function encryptedtreasuremap_decrypt(a: number, b: number, c: number, d: number): void;
export function encryptedtreasuremap_fromBytes(a: number, b: number, c: number): void;
export function encryptedtreasuremap_toBytes(a: number, b: number): void;
export function __wbg_reencryptionrequest_free(a: number): void;
export function __wbg_reencryptionrequestbuilder_free(a: number): void;
export function reencryptionrequestbuilder_new(a: number, b: number, c: number, d: number, e: number): void;
export function reencryptionrequestbuilder_addCapsule(a: number, b: number): number;
export function reencryptionrequestbuilder_build(a: number): number;
export function reencryptionrequest_hrac(a: number): number;
export function reencryptionrequest_publisherVerifyingKey(a: number): number;
export function reencryptionrequest_bobVerifyingKey(a: number): number;
export function reencryptionrequest_encryptedKfrag(a: number): number;
export function reencryptionrequest_capsules(a: number, b: number): void;
export function reencryptionrequest_fromBytes(a: number, b: number, c: number): void;
export function reencryptionrequest_toBytes(a: number, b: number): void;
export function __wbg_reencryptionresponsebuilder_free(a: number): void;
export function reencryptionresponsebuilder_new(a: number): number;
export function reencryptionresponsebuilder_addCapsule(a: number, b: number): number;
export function reencryptionresponsebuilder_addCfrag(a: number, b: number): number;
export function reencryptionresponsebuilder_build(a: number): number;
export function __wbg_reencryptionresponse_free(a: number): void;
export function reencryptionresponse_withCapsule(a: number, b: number): number;
export function reencryptionresponse_fromBytes(a: number, b: number, c: number): void;
export function reencryptionresponse_toBytes(a: number, b: number): void;
export function __wbg_reencryptionresponsewithcapsules_free(a: number): void;
export function reencryptionresponsewithcapsules_withCapsule(a: number, b: number): number;
export function reencryptionresponsewithcapsules_verify(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function __wbg_retrievalkitbuilder_free(a: number): void;
export function retrievalkitbuilder_new(a: number): number;
export function retrievalkitbuilder_addQueriedAddress(a: number, b: number, c: number, d: number): void;
export function retrievalkitbuilder_build(a: number): number;
export function __wbg_retrievalkit_free(a: number): void;
export function retrievalkit_fromMessageKit(a: number): number;
export function retrievalkit_queriedAddresses(a: number, b: number): void;
export function retrievalkit_fromBytes(a: number, b: number, c: number): void;
export function retrievalkit_toBytes(a: number, b: number): void;
export function __wbg_revocationorder_free(a: number): void;
export function revocationorder_new(a: number, b: number, c: number, d: number, e: number): void;
export function revocationorder_verify(a: number, b: number, c: number): void;
export function revocationorder_fromBytes(a: number, b: number, c: number): void;
export function revocationorder_toBytes(a: number, b: number): void;
export function __wbg_verifiedrevocationorder_free(a: number): void;
export function verifiedrevocationorder_address(a: number, b: number): void;
export function __wbg_nodemetadatapayload_free(a: number): void;
export function nodemetadatapayload_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number, o: number): void;
export function nodemetadatapayload_staking_provider_address(a: number, b: number): void;
export function nodemetadatapayload_verifyingKey(a: number): number;
export function nodemetadatapayload_encryptingKey(a: number): number;
export function nodemetadatapayload_operator_signature(a: number, b: number): void;
export function nodemetadatapayload_domain(a: number, b: number): void;
export function nodemetadatapayload_host(a: number, b: number): void;
export function nodemetadatapayload_port(a: number): number;
export function nodemetadatapayload_timestampEpoch(a: number): number;
export function nodemetadatapayload_certificate_der(a: number, b: number): void;
export function nodemetadatapayload_deriveOperatorAddress(a: number, b: number): void;
export function __wbg_nodemetadata_free(a: number): void;
export function nodemetadata_new(a: number, b: number): number;
export function nodemetadata_verify(a: number): number;
export function nodemetadata_payload(a: number): number;
export function nodemetadata_fromBytes(a: number, b: number, c: number): void;
export function nodemetadata_toBytes(a: number, b: number): void;
export function __wbg_fleetstatechecksumbuilder_free(a: number): void;
export function fleetstatechecksumbuilder_new(a: number): number;
export function fleetstatechecksumbuilder_addOtherNode(a: number, b: number): number;
export function fleetstatechecksumbuilder_build(a: number): number;
export function __wbg_fleetstatechecksum_free(a: number): void;
export function fleetstatechecksum_toBytes(a: number, b: number): void;
export function __wbg_metadatarequestbuilder_free(a: number): void;
export function metadatarequestbuilder_new(a: number): number;
export function metadatarequestbuilder_addAnnounceNode(a: number, b: number): number;
export function metadatarequestbuilder_build(a: number): number;
export function __wbg_metadatarequest_free(a: number): void;
export function metadatarequest_fleetStateChecksum(a: number): number;
export function metadatarequest_announceNodes(a: number, b: number): void;
export function metadatarequest_fromBytes(a: number, b: number, c: number): void;
export function metadatarequest_toBytes(a: number, b: number): void;
export function __wbg_metadataresponsepayloadbuilder_free(a: number): void;
export function metadataresponsepayloadbuilder_new(a: number): number;
export function metadataresponsepayloadbuilder_addAnnounceNode(a: number, b: number): number;
export function metadataresponsepayloadbuilder_build(a: number): number;
export function __wbg_metadataresponsepayload_free(a: number): void;
export function metadataresponsepayload_timestamp_epoch(a: number): number;
export function metadataresponsepayload_announceNodes(a: number, b: number): void;
export function __wbg_metadataresponse_free(a: number): void;
export function metadataresponse_new(a: number, b: number): number;
export function metadataresponse_verify(a: number, b: number, c: number): void;
export function metadataresponse_fromBytes(a: number, b: number, c: number): void;
export function metadataresponse_toBytes(a: number, b: number): void;
export function verifiedrevocationorder_encryptedKFrag(a: number): number;
export function __wbg_messagekit_free(a: number): void;
export function __wbg_encryptedtreasuremap_free(a: number): void;
export function retrievalkit_capsule(a: number): number;
export function __wbg_secretkey_free(a: number): void;
export function secretkey_random(): number;
export function secretkey_publicKey(a: number): number;
export function secretkey_toSecretBytes(a: number, b: number): void;
export function secretkey_fromBytes(a: number, b: number, c: number): void;
export function secretkey_toString(a: number, b: number): void;
export function __wbg_secretkeyfactory_free(a: number): void;
export function secretkeyfactory_random(): number;
export function secretkeyfactory_fromSecureRandomness(a: number, b: number, c: number): void;
export function secretkeyfactory_makeKey(a: number, b: number, c: number): number;
export function secretkeyfactory_makeFactory(a: number, b: number, c: number): number;
export function secretkeyfactory_toSecretBytes(a: number, b: number): void;
export function secretkeyfactory_fromBytes(a: number, b: number, c: number): void;
export function secretkeyfactory_toString(a: number, b: number): void;
export function __wbg_publickey_free(a: number): void;
export function publickey_toBytes(a: number, b: number): void;
export function publickey_fromBytes(a: number, b: number, c: number): void;
export function publickey_toString(a: number, b: number): void;
export function publickey_equals(a: number, b: number): number;
export function __wbg_signer_free(a: number): void;
export function signer_new(a: number): number;
export function signer_sign(a: number, b: number, c: number): number;
export function signer_verifyingKey(a: number): number;
export function signer_toString(a: number, b: number): void;
export function __wbg_signature_free(a: number): void;
export function signature_verify(a: number, b: number, c: number, d: number): number;
export function signature_toBytes(a: number, b: number): void;
export function signature_fromBytes(a: number, b: number, c: number): void;
export function signature_toString(a: number, b: number): void;
export function signature_equals(a: number, b: number): number;
export function __wbg_capsule_free(a: number): void;
export function capsule_withCFrag(a: number, b: number): number;
export function capsule_toBytes(a: number, b: number): void;
export function capsule_fromBytes(a: number, b: number, c: number): void;
export function capsule_toString(a: number, b: number): void;
export function capsule_equals(a: number, b: number): number;
export function __wbg_capsulefrag_free(a: number): void;
export function capsulefrag_verify(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function capsulefrag_toBytes(a: number, b: number): void;
export function capsulefrag_fromBytes(a: number, b: number, c: number): void;
export function capsulefrag_toString(a: number, b: number): void;
export function capsulefrag_equals(a: number, b: number): number;
export function verifiedcapsulefrag_fromVerifiedBytes(a: number, b: number, c: number): void;
export function verifiedcapsulefrag_toBytes(a: number, b: number): void;
export function verifiedcapsulefrag_toString(a: number, b: number): void;
export function verifiedcapsulefrag_equals(a: number, b: number): number;
export function __wbg_capsulewithfrags_free(a: number): void;
export function capsulewithfrags_withCFrag(a: number, b: number): number;
export function capsulewithfrags_decryptReencrypted(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function __wbg_encryptionresult_free(a: number): void;
export function __wbg_get_encryptionresult_capsule(a: number): number;
export function __wbg_set_encryptionresult_capsule(a: number, b: number): void;
export function encryptionresult_ciphertext(a: number, b: number): void;
export function encrypt(a: number, b: number, c: number, d: number): void;
export function decryptOriginal(a: number, b: number, c: number, d: number, e: number): void;
export function __wbg_keyfrag_free(a: number): void;
export function keyfrag_verify(a: number, b: number, c: number): void;
export function keyfrag_verifyWithDelegatingKey(a: number, b: number, c: number, d: number): void;
export function keyfrag_verifyWithReceivingKey(a: number, b: number, c: number, d: number): void;
export function keyfrag_verifyWithDelegatingAndReceivingKeys(a: number, b: number, c: number, d: number, e: number): void;
export function keyfrag_toBytes(a: number, b: number): void;
export function keyfrag_fromBytes(a: number, b: number, c: number): void;
export function keyfrag_toString(a: number, b: number): void;
export function keyfrag_equals(a: number, b: number): number;
export function verifiedkeyfrag_fromVerifiedBytes(a: number, b: number, c: number): void;
export function verifiedkeyfrag_toBytes(a: number, b: number): void;
export function verifiedkeyfrag_toString(a: number, b: number): void;
export function verifiedkeyfrag_equals(a: number, b: number): number;
export function generateKFrags(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function reencrypt(a: number, b: number): number;
export function __wbg_verifiedcapsulefrag_free(a: number): void;
export function __wbg_verifiedkeyfrag_free(a: number): void;
export function secretkeyfactory_seedSize(): number;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number): void;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export function __wbindgen_exn_store(a: number): void;
